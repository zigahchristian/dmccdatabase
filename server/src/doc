/**
 * @openapi
 * components:
 *  schemas:
 *    User:
 *      type: object
 *      required:
 *        - username
 *        - email
 *        - password
 *      properties:
 *        username:
 *          type: string
 *          description: Unique username of a new user
 *        email:
 *          type: email
 *          description: Email of the a new User
 *        password:
 *          type: string
 *          description: Password of a new user
 *      example:
 *        username: "christian"
 *        email: "christian@mail.com"
 *        password: "33442211"
 *
 */

/**
 * @openapi
 * tags:
 *  name: Users
 *  description: User Management API
 */

/**
 * @openapi
 * /users/auth/register:
 *  post:
 *    summary: Creates a new User.
 *    tags: [Users]
 *    requestBody:
 *      required: true
 *    content:
 *      application/json:
 *        schema:
 *          $ref:'#/components/schemas/User'
 *    response:
 *      201:
 *        description: User Created Successfully
 *        content:
 *          application/json:
 *            schema:
 *              $ref: '#/components/schemas/User'
 *      403:
 *        description: Not Authenticated
 */

 /**
 * @openapi
 * /users:
 *  get:
 *     summary: Returns list of users
 *     tags: [Users]
 *     responses:
 *       200:
 *         description: List of Users
 *         content:
 *          application/json:
 *            schema:
 *              type: array
 *              items:
 *                $ref: "#/components/schemas/User"
 */

 /**
 * @openapi
 * /users/{id}:
 *  get:
 *    summary: Get a user by ID
 *    tags: [Users]
 *    parameters:
 *      - in: path
 *        name: id
 *        schema:
 *          type: string
 *        required: true
 *        description: User Id
 *    responses:
 *      200:
 *        description: The user description by id
 *        contents:
 *          appplication/json:
 *            schema:
 *              $ref: '#/components/schemas/User'
 *      404:
 *        description: The user was not found
 */


import swaggerJSDoc from "swagger-jsdoc";
import swaggerUi from "swagger-ui-express";


 // Swagger Setup

const options = {
  definition: {
    openapi: "3.0.1",
    info: {
      title: "REST API for Swagger Documentation",
      version: "1.0.0",
    },
    schemes: ["http", "https"],
    servers: [{ url: `http://localhost:${process.env.PORT}/` }],
  },
  apis: [`${__dirname}/routes/*.ts`],
};
const swaggerSpec = swaggerJSDoc(options);
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

// Docs in JSON format
app.get("/docs.json", (req: Request, res: Response) => {
  res.setHeader("Content-Type", "application/json");
  res.send(swaggerSpec);
});


const logger = winston.createLogger({
  level: "info",
  format: winston.format.json(),
  defaultMeta: { service: "user-service" },
  transports: [
    //
    // - Write all logs with importance level of `error` or less to `error.log`
    // - Write all logs with importance level of `info` or less to `combined.log`
    //
    new winston.transports.File({ filename: "error.log", level: "error" }),
    new winston.transports.File({ filename: "combined.log" }),
  ],
});

//
// If we're not in production then log to the `console` with the format:
// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `
//
if (process.env.NODE_ENV !== "production") {
  logger.add(
    new winston.transports.Console({
      format: winston.format.simple(),
    })
  );
}
